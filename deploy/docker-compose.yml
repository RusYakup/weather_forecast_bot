x-localtime: &host_localtime
  type: bind
  source: /etc/localtime
  target: /etc/localtime
  read_only: true

x-logging: &logging
  logging:
    driver: json-file
    options:
      tag: "{{.Name}}"
      max-size: ${LOG_MAX_SIZE:-5m}
      max-file: ${LOG_MAX_FILE:-1}


services:

  ngrok:
    image: ngrok/ngrok
    container_name: ngrok
    restart: always
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN:?err}
    command: http --domain=${APP_DOMAIN:?err} 8888
    network_mode: host

  weather_bot:
    image: yakuptest/weather_bot:0.0.30
    #    build: ../.
    container_name: weather_tg_bot_build
    ports:
      - "8888:8888"
    labels:
      - prometheus_job=weather_tg_bot # For prometheus
    environment:
      - TOKEN=${TOKEN:?err}
      - API_KEY=${API_KEY:?err}
      - TG_BOT_API_URL=${TG_BOT_API_URL:?err}
      - APP_DOMAIN=${APP_DOMAIN:?err}
      - SECRET_TOKEN_TG_WEBHOOK=${SECRET_TOKEN_TG_WEBHOOK:?err}
      - POSTGRES_USER=${POSTGRES_USER:?err}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?err}
      - POSTGRES_DB=${POSTGRES_DB:?err}
      - GET_USER=${GET_USER:?err}
      - GET_PASSWORD=${GET_PASSWORD:?err}
      - POOL_HOST_DB=${POOL_HOST_DB:?err}
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN:?err}
    depends_on:
      - postgres
    command: python -m src.app
    restart: unless-stopped
    <<: *logging
    networks:
      - external

  postgres:
    image: postgres:15.2
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:?err}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?err}
      - POSTGRES_DB=${POSTGRES_DB:?err}
      - GRAFANA_PSQL_USER=${GRAFANA_PSQL_USER:?err}
      - GRAFANA_PSQL_PASSWORD=${GRAFANA_PSQL_PASSWORD:?err}
      - GRAFANA_PSQL_DB=${GRAFANA_PSQL_DB:?err}
    volumes:
      - ./script_psql:/docker-entrypoint-initdb.d/
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - external
    <<: *logging

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"
    labels:
      - prometheus_job=postgres_exporter
    command: '--no-collector.stat_bgwriter'
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - external

  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: prometheus
    user: root
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - type: volume
        source: prometheus_data
        target: /prometheus
    restart: unless-stopped
    networks:
      - external
    <<: *logging

  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:?err}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:?err}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres
      - GF_DATABASE_NAME=grafana_yakup
      - GF_DATABASE_USER=grafana_yakup
      - GF_DATABASE_PASSWORD=grafana_yakup
    volumes:
      - ./monitoring_init/grafana/datasource/:/etc/grafana/provisioning/datasources/
      - ./monitoring_init/grafana/dashboards/:/etc/grafana/provisioning/dashboards/
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - external
    <<: *logging

  loki:
    image: grafana/loki:2.9.9
    <<: *logging
    container_name: loki
    restart: always
    environment:
      - ENV_VAR_LOKI_RETENTION_PERIOD=${LOGS_STORAGE_RETENTION_PERIOD:-7d}
      - ENV_VAR_LOKI_MAX_STREAMS_PER_USER=100000
      - ENV_VAR_LOKI_RETENTION_DELETE_DELAY=10m
      - LOKI_LISTEN_PORT=3100
    ports:
      - "3100:3100"
    deploy:
      resources:
        limits:
          cpus: ${LOKI_CPU_LIMIT:-1.5}
          memory: ${LOKI_MEMORY_LIMIT:-2048M}
        reservations:
          cpus: ${LOKI_CPU_REQUESTS:-0.25}
          memory: ${LOKI_MEMORY_REQUESTS:- 128M}
    volumes:
      - *host_localtime
      - ./monitoring_init/loki/loki.conf:/loki/etc/loki.conf
      - type: volume
        source: loki_data
        target: /loki
    command: --config.file=/loki/etc/loki.conf -config.expand-env=true
    networks:
      - internal
      - external

  promtail:
    image: grafana/promtail
    <<: *logging
    container_name: promtail
    environment:
      - VAR_ENV_PROMTAIL_CLIENT=${LOKI_ADDRESS-http://loki:3100}/loki/api/v1/push
    ports:
      - "9080:9080"
    volumes:
      - *host_localtime
      - ./monitoring_init/promtail:/etc/promtail/
    command: -config.file=/etc/promtail/docker-promtail-config.yml -config.expand-env=true
    restart: unless-stopped
    networks:
      - internal
      - external


volumes:
  postgres_data:
    driver: local

  prometheus_data:
    driver: local

  loki_data:
    driver: local

networks:
  internal:
    name: bot_internal
    driver: bridge
    internal: true
  external:
    name: bot_external
    driver: bridge